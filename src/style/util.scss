// Hover/active wrapper. If the hover-enabled class isn't present,
// no hover effects will be used
@mixin active() {
    .hover-enabled &:hover, &:active {
        @content;
    }
}

@mixin fill {
    width: 100%;
    height: 100%;
}

// Utility mixin for creating buttons
// with image backgrounds and hover image
// backgrounds
@mixin image-button($imgUrl, $hoverUrl) {
    background: url($imgUrl) no-repeat;
    background-size: 100% 100%;
    cursor: pointer;

    @include active {
        background-image: url($hoverUrl)
    }
}

// Marks the last element as last for susy grids
@mixin mark-last {
    &:last-child { @include last; }
}

/*
    Set all position properties:
    y offset,
    x offset,
    top/bottom,
    left/right,
    position
*/
@mixin pos($y: auto, $x: auto, $topBottom: top, $leftRight: left, $posType: absolute) {
    position: $posType;
    @if $topBottom == top {
        top: $y;
    }
    @else {
        bottom: $y;
    }

    @if $leftRight == left {
        left: $x;
    }
    @else {
        right: $x;
    }
}

// Utility mixin for setting width/height
@mixin size($width: auto, $height: auto) {
    width: $width;
    height: $height;
}

@mixin withCount($n) {
    @if $n == 1 {
        &:first-child:nth-last-child(1) {
            @content;
        }
    }
    @else {
        &:first-child:nth-last-child(#{$n}),
        &:first-child:nth-last-child(#{$n}) ~ & {
            @content;
        }
    }
}

@mixin vcenter {
  position: absolute;
  top: 50%;
  transform: translate(0, -50%);
}

@mixin sprite-frame (
  $sprite-path, // image url
  $width, // entire spritesheet width
  $height, // entire spritesheet height
  $columns,
  $rows,
  $x:0, // start column
  $y:0, // start row
  $scale:1 // does not use transform scale
) {
  $frame-width: $width / $columns;
  $frame-height: $height/ $rows;
  $bg-x: -1 * $x * $frame-width * $scale;
  $bg-y: -1 * $y * $frame-height * $scale;

  width: $frame-width * $scale;
  height: $frame-height * $scale;
  background: url($sprite-path) no-repeat;
  background-position: $bg-x $bg-y;
  background-size: ($width * $scale) ($height * $scale);
}


// This mixin assumes your spritesheet's frames are all of equal dimensions and there is no padding
@mixin animated-sprite(
  $sprite-path, // image url
  $width, // entire spritesheet width
  $height, // entire spritesheet height
  $columns,
  $rows,
  $x:0, // start column
  $y:0, // start row
  $scale:1, // does not use transform scale
  $speed:1s,
  $steps:$columns // how many frames in the animation (defaults to columns)
) {
  $animimation-name: "animated-sprite-keyframes-#{unique_id()}";
  $frame-width: $width / $columns;
  $frame-height: $height/ $rows;
  $bg-x: -1 * $x * $frame-width * $scale;
  $bg-y: -1 * $y * $frame-height * $scale;

  @include sprite-frame(
    $sprite-path,
    $width,
    $height,
    $columns,
    $rows,
    $x,
    $y,
    $scale
  );

  animation: #{$animimation-name} $speed steps($steps) infinite;

  @at-root {
    @keyframes #{$animimation-name} {
      from {
        background-position: $bg-x $bg-y;
      }
      to {
        background-position: -($width * $scale * ($steps / $columns)) $bg-y;
      }
    }
  }
}
